@page "/"
@inject IJSRuntime JSRuntime

<div class="container" @onkeydown="OnKeyDown" tabindex="0">

    <div class="row justify-content-center my-3">
        <div class="col-6">
            <input type="text" class="form-control" placeholder="Search for books..." @oninput="OnSearchChanged" />
        </div>
    </div>

    <div class="row justify-content-center my-3">
        <div class="col-6 text-center">
            <button class="btn btn-primary" disabled="@(_bookBeingEdited != null)" @onclick="OnAdd">Add Book</button>
        </div>
    </div>

    <div class="row header-row">
        <div class="col header-col">Title</div>
        <div class="col header-col">Authors</div>
        <div class="col header-col">Publisher</div>
        <div class="col header-col">ISBN</div>
        <div class="col-1 header-col"></div>
    </div>

    @foreach (Book book in _booksToDisplay)
    {
        bool isBeingEdited = book == _bookBeingEdited;

        <div class="row book-row">
            <div class="col book-col">
                <input type="text" class="form-control" @bind="book.Title" readonly="@(!isBeingEdited)" />
            </div>
            <div class="col book-col">
                <input type="text" class="form-control" @bind="book.AuthorsString" readonly="@(!isBeingEdited)" />
            </div>
            <div class="col book-col">
                <input type="text" class="form-control" @bind="book.Publisher.Name" readonly="@(!isBeingEdited)" />
            </div>
            <div class="col book-col">
                <input type="text" class="form-control" @bind="@book.ISBN" readonly="@(!isBeingEdited)" maxlength="17" />
            </div>

            <div class="col-1 book-col">
                @if (isBeingEdited)
                {
                    <a @onclick="() => OnSave(book)" class="save" href="#"><i class='bx bx-check'></i></a>
                    <a @onclick="() => OnCancel(book)" class="cancel" href="#"><i class='bx bx-x'></i></a>
                }
                else
                {
                    <a @onclick="() => OnEdit(book)" class="edit" href="#"><i class='bx bx-pencil'></i></a>
                    <a @onclick="() => OnDelete(book)" class="delete" href="#"><i class='bx bx-trash-alt'></i></a>
                }
            </div>
        </div>
    }

</div>

@code
{
    private List<Book> _books = null!;
    private List<Book> _booksToDisplay = null!;

    private Book? _bookBeingEdited = null;
    private Book? _bookBeingEditedOriginalState = null;

    protected override void OnInitialized()
    {
        RefreshBooks();
    }

    private void OnSearchChanged(ChangeEventArgs args)
    {
        string searchQuery = args.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrEmpty(searchQuery))
            _booksToDisplay = _books;

        _booksToDisplay = _books.Where(book => book.Title.Contains(searchQuery, StringComparison.OrdinalIgnoreCase)).ToList();
    }

    private void OnAdd()
    {
        Book book = new()
        {
            Title = "New Book",
            AuthorsString = "New Author",
            Publisher = new Publisher() { Name = "New Publisher" },
            ISBN = "000-0-00000-000-0"
        };

        _booksToDisplay.Add(book);
        OnEdit(book);
    }

    private void OnEdit(Book book)
    {
        _bookBeingEdited = book;
        _bookBeingEditedOriginalState = book.Clone();
    }

    private void OnDelete(Book book)
    {
        LibraryDatabase.DeleteBook(book.ISBN);

        RefreshBooks();
    }

    private void OnSave(Book book)
    {
        if (_booksToDisplay.Any(book => book.ISBN == book.ISBN))
        {
            // TODO: Update.
            LibraryDatabase.AddBook(book);
        }
        else
        {
            LibraryDatabase.AddBook(book);
        }

        _bookBeingEdited = null;
        _bookBeingEditedOriginalState = null;
    }

    private void OnCancel(Book book)
    {
        if (LibraryDatabase.HasBook(book.ISBN))
        {
            book.CopyFrom(_bookBeingEditedOriginalState!);
        }
        else
        {
            _booksToDisplay.Remove(book);
        }

        _bookBeingEdited = null;
        _bookBeingEditedOriginalState = null;
    }

    private void RefreshBooks()
    {
        _books = LibraryDatabase.GetAllBooks();
        _booksToDisplay = _books;
    }

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (e.Key == "r")
        {
            string randomISBN = GenerateRandomISBN();
            JSRuntime.InvokeVoidAsync("copyToClipboard", randomISBN);
        }
    }

    private string GenerateRandomISBN()
    {
        Random random = new();

        int prefix = 978;
        int group = random.Next(0, 10);
        int publisher = random.Next(0, 100);
        int title = random.Next(0, 1000000);

        string isbnWithoutCheck = $"{prefix}{group:D1}{publisher:D2}{title:D6}";

        int sum = 0;
        for (int i = 0; i < isbnWithoutCheck.Length; i++)
        {
            int digit = isbnWithoutCheck[i] - '0';
            sum += (i % 2 == 0) ? digit : digit * 3;
        }
        int checkDigit = (10 - (sum % 10)) % 10;

        return $"{prefix}-{group:D1}-{publisher:D2}-{title:D6}-{checkDigit}";
    }
}